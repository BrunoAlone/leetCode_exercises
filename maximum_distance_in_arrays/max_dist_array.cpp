#include <iostream>
#include <vector>
#include <algorithm>

class Solution {
private:
	int	min_;
	int	max_;
	int							tmp_max_;
	int							tmp_min_;
	int	difference_;
	int	result;
	std::vector<std::vector<int>>::iterator	it_;
	bool	first_vector_ = true;
	bool	second_vector_ = true;
	bool	flag_min = false;
	bool	flag_max = false;
public:
    int maxDistance(std::vector<std::vector<int>>& arrays) {

		for (this->it_ = arrays.begin(); this->it_ != arrays.end(); it_++)
		{
			std::vector<int>::iterator	it_temp_first;
			std::vector<int>::iterator	it_temp_last;
			int							min_tmp;
			int							max_tmp;

			it_temp_first = it_->begin();
			it_temp_last = it_->end();

			min_tmp = *std::min_element(it_temp_first, it_temp_last);
			max_tmp = *std::max_element(it_temp_first, it_temp_last);

			if (arrays.size() == 2)
			{
				this->min_ = *std::min_element(it_temp_first, it_temp_last);
				this->max_ = *std::max_element(it_temp_first, it_temp_last);
				this->it_++;
				it_temp_first = it_->begin();
				it_temp_last = it_->end();
				min_tmp = *std::min_element(it_temp_first, it_temp_last);
				max_tmp = *std::max_element(it_temp_first, it_temp_last);

				if ((max_tmp - this->min_) > (this->max_ - min_tmp))
					return (max_tmp - this->min_);
				else
					return (this->max_ - min_tmp);
			}

			if (this->first_vector_ == true)
			{
				this->min_ = min_tmp;
				this->max_ = max_tmp;
				this->first_vector_ = false;
			}
			else {
				if (this->min_ > min_tmp && this->max_ < max_tmp)
				{
					if ((this->min_ - min_tmp) > (max_tmp - this->max_))
					{
						this->min_ = min_tmp;
						if (this->tmp_max_ < max_tmp)
						{
							this->tmp_max_ = max_tmp;
							this->flag_max = true;
						}
					}
					else
					{
						this->max_ = max_tmp;
						if (this->tmp_min_ > min_tmp)
						{
							this->tmp_min_ = min_tmp;
							this->flag_min = true;
						}
					}
				}
				else
				{
					if (this->min_ > min_tmp)
						this->min_ = min_tmp;
					else if (this->max_ < max_tmp)
						this->max_ = max_tmp;
					else if ((this->min_ == min_tmp) && (this->tmp_max_ > this->max_) && (this->flag_max == true))
						this->max_ = this->tmp_max_;
					else if ((this->max_ == max_tmp) && (this->tmp_min_ < this->min_) && (this->flag_min == true))
						this->min_ = this->tmp_min_;
				}
			}
		}
		result = this->max_ - this->min_;

		return (result);
    }
};

int	main()
{
	std::vector<std::vector<int>>	test = {{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2},{1},{2}};

	Solution	test_sol;
	int			x;

	x = test_sol.maxDistance(test);

	std::cout << "Result=" << x << std::endl;
	return (0);
}
